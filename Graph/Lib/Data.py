# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Data')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Data')
    _Data = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Data', [dirname(__file__)])
        except ImportError:
            import _Data
            return _Data
        try:
            _mod = imp.load_module('_Data', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Data = swig_import_helper()
    del swig_import_helper
else:
    import _Data
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Data.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Data.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Data.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Data.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Data.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Data.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Data.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Data.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Data.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Data.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Data.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Data.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Data.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Data.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Data.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Data.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Data.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Data.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _Data.SHARED_PTR_DISOWN
class TStringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TStringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TStringMap, name)
    __repr__ = _swig_repr

    def __nonzero__(self) -> "bool":
        return _Data.TStringMap___nonzero__(self)

    def __bool__(self) -> "bool":
        return _Data.TStringMap___bool__(self)

    def __len__(self) -> "std::map< std::wstring,std::wstring >::size_type":
        return _Data.TStringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::wstring,std::wstring >::key_type const &') -> "std::map< std::wstring,std::wstring >::mapped_type const &":
        return _Data.TStringMap___getitem__(self, key)

    def __delitem__(self, key: 'std::map< std::wstring,std::wstring >::key_type const &') -> "void":
        return _Data.TStringMap___delitem__(self, key)

    def has_key(self, key: 'std::map< std::wstring,std::wstring >::key_type const &') -> "bool":
        return _Data.TStringMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _Data.TStringMap_keys(self)

    def values(self) -> "PyObject *":
        return _Data.TStringMap_values(self)

    def items(self) -> "PyObject *":
        return _Data.TStringMap_items(self)

    def __contains__(self, key: 'std::map< std::wstring,std::wstring >::key_type const &') -> "bool":
        return _Data.TStringMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _Data.TStringMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _Data.TStringMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _Data.TStringMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _Data.TStringMap_asdict(self)

    def __init__(self, *args):
        this = _Data.new_TStringMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _Data.TStringMap_empty(self)

    def size(self) -> "std::map< std::wstring,std::wstring >::size_type":
        return _Data.TStringMap_size(self)

    def swap(self, v: 'TStringMap') -> "void":
        return _Data.TStringMap_swap(self, v)

    def clear(self) -> "void":
        return _Data.TStringMap_clear(self)

    def get_allocator(self) -> "std::map< std::wstring,std::wstring >::allocator_type":
        return _Data.TStringMap_get_allocator(self)

    def erase(self, x: 'std::map< std::wstring,std::wstring >::key_type const &') -> "std::map< std::wstring,std::wstring >::size_type":
        return _Data.TStringMap_erase(self, x)

    def count(self, x: 'std::map< std::wstring,std::wstring >::key_type const &') -> "std::map< std::wstring,std::wstring >::size_type":
        return _Data.TStringMap_count(self, x)
    __swig_destroy__ = _Data.delete_TStringMap
    __del__ = lambda self: None
TStringMap_swigregister = _Data.TStringMap_swigregister
TStringMap_swigregister(TStringMap)


def PushUndoElem(Elem: 'TGraphElem') -> "void":
    return _Data.PushUndoElem(Elem)
PushUndoElem = _Data.PushUndoElem

def AbortUpdate() -> "void":
    return _Data.AbortUpdate()
AbortUpdate = _Data.AbortUpdate

def IsUpdating() -> "bool":
    return _Data.IsUpdating()
IsUpdating = _Data.IsUpdating

def Redraw() -> "void":
    return _Data.Redraw()
Redraw = _Data.Redraw

def UpdateTreeView() -> "void":
    return _Data.UpdateTreeView()
UpdateTreeView = _Data.UpdateTreeView

def GetSelected() -> "TGraphElemPtr":
    return _Data.GetSelected()
GetSelected = _Data.GetSelected

def SetSelected(Elem: 'TGraphElemPtr const &') -> "void":
    return _Data.SetSelected(Elem)
SetSelected = _Data.SetSelected

def ChildCount(Elem: 'TGraphElemPtr const &') -> "unsigned int":
    return _Data.ChildCount(Elem)
ChildCount = _Data.ChildCount

def GetChild(Elem: 'TGraphElemPtr const &', Index: 'unsigned int') -> "TGraphElemPtr":
    return _Data.GetChild(Elem, Index)
GetChild = _Data.GetChild

def RemoveChild(Elem: 'TGraphElemPtr const &', Index: 'unsigned int') -> "void":
    return _Data.RemoveChild(Elem, Index)
RemoveChild = _Data.RemoveChild

def InsertChild(Elem: 'TGraphElemPtr const &', Child: 'TGraphElemPtr const &', Index: 'int') -> "void":
    return _Data.InsertChild(Elem, Child, Index)
InsertChild = _Data.InsertChild

def ReplaceChild(Elem: 'TGraphElemPtr const &', Index: 'unsigned int', Child: 'TGraphElemPtr const &') -> "void":
    return _Data.ReplaceChild(Elem, Index, Child)
ReplaceChild = _Data.ReplaceChild

def CompareElem(E1: 'TGraphElemPtr const &', E2: 'TGraphElemPtr const &') -> "bool":
    return _Data.CompareElem(E1, E2)
CompareElem = _Data.CompareElem

def GetPluginData() -> "TStringMap &":
    return _Data.GetPluginData()
GetPluginData = _Data.GetPluginData

def GetTopElem() -> "boost::shared_ptr< TTopGraphElem > const &":
    return _Data.GetTopElem()
GetTopElem = _Data.GetTopElem
class TGraphElem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TGraphElem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TGraphElem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MakeText(self) -> "std::wstring":
        return _Data.TGraphElem_MakeText(self)

    def Clone(self) -> "TGraphElemPtr":
        return _Data.TGraphElem_Clone(self)
    __swig_setmethods__["Visible"] = _Data.TGraphElem_Visible_set
    __swig_getmethods__["Visible"] = _Data.TGraphElem_Visible_get
    if _newclass:
        Visible = _swig_property(_Data.TGraphElem_Visible_get, _Data.TGraphElem_Visible_set)
    __swig_setmethods__["ShowInLegend"] = _Data.TGraphElem_ShowInLegend_set
    __swig_getmethods__["ShowInLegend"] = _Data.TGraphElem_ShowInLegend_get
    if _newclass:
        ShowInLegend = _swig_property(_Data.TGraphElem_ShowInLegend_get, _Data.TGraphElem_ShowInLegend_set)
    __swig_setmethods__["ShowInFunctionList"] = _Data.TGraphElem_ShowInFunctionList_set
    __swig_getmethods__["ShowInFunctionList"] = _Data.TGraphElem_ShowInFunctionList_get
    if _newclass:
        ShowInFunctionList = _swig_property(_Data.TGraphElem_ShowInFunctionList_get, _Data.TGraphElem_ShowInFunctionList_set)
    __swig_setmethods__["LegendText"] = _Data.TGraphElem_LegendText_set
    __swig_getmethods__["LegendText"] = _Data.TGraphElem_LegendText_get
    if _newclass:
        LegendText = _swig_property(_Data.TGraphElem_LegendText_get, _Data.TGraphElem_LegendText_set)
    __swig_getmethods__["Parent"] = _Data.TGraphElem_Parent_get
    if _newclass:
        Parent = _swig_property(_Data.TGraphElem_Parent_get)
    __swig_getmethods__["Caption"] = _Data.TGraphElem_Caption_get
    if _newclass:
        Caption = _swig_property(_Data.TGraphElem_Caption_get)
    __swig_getmethods__["_PluginData"] = _Data.TGraphElem__PluginData_get
    if _newclass:
        _PluginData = _swig_property(_Data.TGraphElem__PluginData_get)

    def ThisPtr(self) -> "int":
        return _Data.TGraphElem_ThisPtr(self)

    def __eq__(self, rhs):
      if not isinstance(rhs, TGraphElem): return False
      return self.ThisPtr() == rhs.ThisPtr()

    __swig_destroy__ = _Data.delete_TGraphElem
    __del__ = lambda self: None
TGraphElem_swigregister = _Data.TGraphElem_swigregister
TGraphElem_swigregister(TGraphElem)

dtAuto = _Data.dtAuto
dtDots = _Data.dtDots
dtLines = _Data.dtLines
class TBaseFuncType(TGraphElem):
    __swig_setmethods__ = {}
    for _s in [TGraphElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TBaseFuncType, name, value)
    __swig_getmethods__ = {}
    for _s in [TGraphElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TBaseFuncType, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def MakeDifFunc(self) -> "boost::shared_ptr< TBaseFuncType >":
        return _Data.TBaseFuncType_MakeDifFunc(self)

    def Eval(self, t: 'long double') -> "Func32::TCoord< long double >":
        return _Data.TBaseFuncType_Eval(self, t)

    def CalcArea(self, From: 'long double', To: 'long double') -> "long double":
        return _Data.TBaseFuncType_CalcArea(self, From, To)

    def CalcArcLength(self, From: 'long double', To: 'long double') -> "long double":
        return _Data.TBaseFuncType_CalcArcLength(self, From, To)
    __swig_setmethods__["Steps"] = _Data.TBaseFuncType_Steps_set
    __swig_getmethods__["Steps"] = _Data.TBaseFuncType_Steps_get
    if _newclass:
        Steps = _swig_property(_Data.TBaseFuncType_Steps_get, _Data.TBaseFuncType_Steps_set)
    __swig_getmethods__["Variable"] = _Data.TBaseFuncType_Variable_get
    if _newclass:
        Variable = _swig_property(_Data.TBaseFuncType_Variable_get)
    __swig_setmethods__["Color"] = _Data.TBaseFuncType_Color_set
    __swig_getmethods__["Color"] = _Data.TBaseFuncType_Color_get
    if _newclass:
        Color = _swig_property(_Data.TBaseFuncType_Color_get, _Data.TBaseFuncType_Color_set)
    __swig_setmethods__["Size"] = _Data.TBaseFuncType_Size_set
    __swig_getmethods__["Size"] = _Data.TBaseFuncType_Size_get
    if _newclass:
        Size = _swig_property(_Data.TBaseFuncType_Size_get, _Data.TBaseFuncType_Size_set)
    __swig_setmethods__["DrawType"] = _Data.TBaseFuncType_DrawType_set
    __swig_getmethods__["DrawType"] = _Data.TBaseFuncType_DrawType_get
    if _newclass:
        DrawType = _swig_property(_Data.TBaseFuncType_DrawType_get, _Data.TBaseFuncType_DrawType_set)
    __swig_setmethods__["Style"] = _Data.TBaseFuncType_Style_set
    __swig_getmethods__["Style"] = _Data.TBaseFuncType_Style_get
    if _newclass:
        Style = _swig_property(_Data.TBaseFuncType_Style_get, _Data.TBaseFuncType_Style_set)
    __swig_setmethods__["EndpointStyle"] = _Data.TBaseFuncType_EndpointStyle_set
    __swig_getmethods__["EndpointStyle"] = _Data.TBaseFuncType_EndpointStyle_get
    if _newclass:
        EndpointStyle = _swig_property(_Data.TBaseFuncType_EndpointStyle_get, _Data.TBaseFuncType_EndpointStyle_set)
    __swig_setmethods__["From"] = _Data.TBaseFuncType_From_set
    __swig_getmethods__["From"] = _Data.TBaseFuncType_From_get
    if _newclass:
        From = _swig_property(_Data.TBaseFuncType_From_get, _Data.TBaseFuncType_From_set)
    __swig_setmethods__["To"] = _Data.TBaseFuncType_To_set
    __swig_getmethods__["To"] = _Data.TBaseFuncType_To_get
    if _newclass:
        To = _swig_property(_Data.TBaseFuncType_To_get, _Data.TBaseFuncType_To_set)
    __swig_getmethods__["Points"] = _Data.TBaseFuncType_Points_get
    if _newclass:
        Points = _swig_property(_Data.TBaseFuncType_Points_get)
    __swig_getmethods__["PointNum"] = _Data.TBaseFuncType_PointNum_get
    if _newclass:
        PointNum = _swig_property(_Data.TBaseFuncType_PointNum_get)
    __swig_getmethods__["CoordList"] = _Data.TBaseFuncType_CoordList_get
    if _newclass:
        CoordList = _swig_property(_Data.TBaseFuncType_CoordList_get)
    __swig_destroy__ = _Data.delete_TBaseFuncType
    __del__ = lambda self: None
TBaseFuncType_swigregister = _Data.TBaseFuncType_swigregister
TBaseFuncType_swigregister(TBaseFuncType)

class TTopGraphElem(TGraphElem):
    __swig_setmethods__ = {}
    for _s in [TGraphElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TTopGraphElem, name, value)
    __swig_getmethods__ = {}
    for _s in [TGraphElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TTopGraphElem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Data.delete_TTopGraphElem
    __del__ = lambda self: None
TTopGraphElem_swigregister = _Data.TTopGraphElem_swigregister
TTopGraphElem_swigregister(TTopGraphElem)

class TStdFunc(TBaseFuncType):
    __swig_setmethods__ = {}
    for _s in [TBaseFuncType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TStdFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [TBaseFuncType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TStdFunc, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Text"] = _Data.TStdFunc_Text_get
    if _newclass:
        Text = _swig_property(_Data.TStdFunc_Text_get)
    __swig_setmethods__["Equation"] = _Data.TStdFunc_Equation_set
    __swig_getmethods__["Equation"] = _Data.TStdFunc_Equation_get
    if _newclass:
        Equation = _swig_property(_Data.TStdFunc_Equation_get, _Data.TStdFunc_Equation_set)

    def __init__(self, Str: 'std::wstring const &'):
        this = _Data.new_TStdFunc(Str)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Data.delete_TStdFunc
    __del__ = lambda self: None
TStdFunc_swigregister = _Data.TStdFunc_swigregister
TStdFunc_swigregister(TStdFunc)

class TParFunc(TBaseFuncType):
    __swig_setmethods__ = {}
    for _s in [TBaseFuncType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TParFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [TBaseFuncType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TParFunc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Equation"] = _Data.TParFunc_Equation_set
    __swig_getmethods__["Equation"] = _Data.TParFunc_Equation_get
    if _newclass:
        Equation = _swig_property(_Data.TParFunc_Equation_get, _Data.TParFunc_Equation_set)

    def __init__(self, xStr: 'std::wstring const &', yStr: 'std::wstring const &'):
        this = _Data.new_TParFunc(xStr, yStr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Data.delete_TParFunc
    __del__ = lambda self: None
TParFunc_swigregister = _Data.TParFunc_swigregister
TParFunc_swigregister(TParFunc)

class TPolFunc(TBaseFuncType):
    __swig_setmethods__ = {}
    for _s in [TBaseFuncType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TPolFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [TBaseFuncType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPolFunc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Equation"] = _Data.TPolFunc_Equation_set
    __swig_getmethods__["Equation"] = _Data.TPolFunc_Equation_get
    if _newclass:
        Equation = _swig_property(_Data.TPolFunc_Equation_get, _Data.TPolFunc_Equation_set)

    def __init__(self, Str: 'std::wstring const &'):
        this = _Data.new_TPolFunc(Str)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Data.delete_TPolFunc
    __del__ = lambda self: None
TPolFunc_swigregister = _Data.TPolFunc_swigregister
TPolFunc_swigregister(TPolFunc)

ttTangent = _Data.ttTangent
ttNormal = _Data.ttNormal
class TTangent(TBaseFuncType):
    __swig_setmethods__ = {}
    for _s in [TBaseFuncType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TTangent, name, value)
    __swig_getmethods__ = {}
    for _s in [TBaseFuncType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TTangent, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Valid"] = _Data.TTangent_Valid_get
    if _newclass:
        Valid = _swig_property(_Data.TTangent_Valid_get)
    __swig_setmethods__["Pos"] = _Data.TTangent_Pos_set
    __swig_getmethods__["Pos"] = _Data.TTangent_Pos_get
    if _newclass:
        Pos = _swig_property(_Data.TTangent_Pos_get, _Data.TTangent_Pos_set)
    __swig_setmethods__["TangentType"] = _Data.TTangent_TangentType_set
    __swig_getmethods__["TangentType"] = _Data.TTangent_TangentType_get
    if _newclass:
        TangentType = _swig_property(_Data.TTangent_TangentType_get, _Data.TTangent_TangentType_set)

    def __init__(self):
        this = _Data.new_TTangent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Data.delete_TTangent
    __del__ = lambda self: None
TTangent_swigregister = _Data.TTangent_swigregister
TTangent_swigregister(TTangent)

ebtNone = _Data.ebtNone
ebtFixed = _Data.ebtFixed
ebtRelative = _Data.ebtRelative
ebtCustom = _Data.ebtCustom
iaLinear = _Data.iaLinear
iaCubicSpline = _Data.iaCubicSpline
iaHalfCosine = _Data.iaHalfCosine
iaCubicSpline2 = _Data.iaCubicSpline2
ptCartesian = _Data.ptCartesian
ptPolar = _Data.ptPolar
ttLinear = _Data.ttLinear
ttLogarithmic = _Data.ttLogarithmic
ttPolynomial = _Data.ttPolynomial
ttPower = _Data.ttPower
ttExponential = _Data.ttExponential
lpAbove = _Data.lpAbove
lpBelow = _Data.lpBelow
lpLeft = _Data.lpLeft
lpRight = _Data.lpRight
lpAboveLeft = _Data.lpAboveLeft
lpAboveRight = _Data.lpAboveRight
lpBelowLeft = _Data.lpBelowLeft
lpBelowRight = _Data.lpBelowRight
class TPointSeries(TGraphElem):
    __swig_setmethods__ = {}
    for _s in [TGraphElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TPointSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [TGraphElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TPointSeries, name)
    __repr__ = _swig_repr

    def GetDblPoint(self, Index: 'int') -> "Func32::TDblPoint const &":
        return _Data.TPointSeries_GetDblPoint(self, Index)

    def GetPoint(self, Index: 'unsigned int') -> "TPointSeriesPoint const &":
        return _Data.TPointSeries_GetPoint(self, Index)

    def PointCount(self) -> "unsigned int":
        return _Data.TPointSeries_PointCount(self)

    def InsertDblPoint(self, Point: 'Func32::TDblPoint', Index: 'int') -> "void":
        return _Data.TPointSeries_InsertDblPoint(self, Point, Index)

    def InsertPoint(self, Point: 'TPointSeriesPoint', Index: 'int') -> "void":
        return _Data.TPointSeries_InsertPoint(self, Point, Index)

    def ReplaceDblPoint(self, Point: 'Func32::TDblPoint', Index: 'unsigned int') -> "void":
        return _Data.TPointSeries_ReplaceDblPoint(self, Point, Index)

    def ReplacePoint(self, Point: 'TPointSeriesPoint', Index: 'unsigned int') -> "void":
        return _Data.TPointSeries_ReplacePoint(self, Point, Index)

    def DeletePoint(self, Index: 'unsigned int', Count: 'unsigned int'=1) -> "void":
        return _Data.TPointSeries_DeletePoint(self, Index, Count)
    __swig_setmethods__["xErrorBarType"] = _Data.TPointSeries_xErrorBarType_set
    __swig_getmethods__["xErrorBarType"] = _Data.TPointSeries_xErrorBarType_get
    if _newclass:
        xErrorBarType = _swig_property(_Data.TPointSeries_xErrorBarType_get, _Data.TPointSeries_xErrorBarType_set)
    __swig_setmethods__["yErrorBarType"] = _Data.TPointSeries_yErrorBarType_set
    __swig_getmethods__["yErrorBarType"] = _Data.TPointSeries_yErrorBarType_get
    if _newclass:
        yErrorBarType = _swig_property(_Data.TPointSeries_yErrorBarType_get, _Data.TPointSeries_yErrorBarType_set)
    __swig_setmethods__["xErrorValue"] = _Data.TPointSeries_xErrorValue_set
    __swig_getmethods__["xErrorValue"] = _Data.TPointSeries_xErrorValue_get
    if _newclass:
        xErrorValue = _swig_property(_Data.TPointSeries_xErrorValue_get, _Data.TPointSeries_xErrorValue_set)
    __swig_setmethods__["yErrorValue"] = _Data.TPointSeries_yErrorValue_set
    __swig_getmethods__["yErrorValue"] = _Data.TPointSeries_yErrorValue_get
    if _newclass:
        yErrorValue = _swig_property(_Data.TPointSeries_yErrorValue_get, _Data.TPointSeries_yErrorValue_set)
    __swig_setmethods__["FillColor"] = _Data.TPointSeries_FillColor_set
    __swig_getmethods__["FillColor"] = _Data.TPointSeries_FillColor_get
    if _newclass:
        FillColor = _swig_property(_Data.TPointSeries_FillColor_get, _Data.TPointSeries_FillColor_set)
    __swig_setmethods__["LineColor"] = _Data.TPointSeries_LineColor_set
    __swig_getmethods__["LineColor"] = _Data.TPointSeries_LineColor_get
    if _newclass:
        LineColor = _swig_property(_Data.TPointSeries_LineColor_get, _Data.TPointSeries_LineColor_set)
    __swig_setmethods__["FrameColor"] = _Data.TPointSeries_FrameColor_set
    __swig_getmethods__["FrameColor"] = _Data.TPointSeries_FrameColor_get
    if _newclass:
        FrameColor = _swig_property(_Data.TPointSeries_FrameColor_get, _Data.TPointSeries_FrameColor_set)
    __swig_setmethods__["Size"] = _Data.TPointSeries_Size_set
    __swig_getmethods__["Size"] = _Data.TPointSeries_Size_get
    if _newclass:
        Size = _swig_property(_Data.TPointSeries_Size_get, _Data.TPointSeries_Size_set)
    __swig_setmethods__["Style"] = _Data.TPointSeries_Style_set
    __swig_getmethods__["Style"] = _Data.TPointSeries_Style_get
    if _newclass:
        Style = _swig_property(_Data.TPointSeries_Style_get, _Data.TPointSeries_Style_set)
    __swig_setmethods__["LineSize"] = _Data.TPointSeries_LineSize_set
    __swig_getmethods__["LineSize"] = _Data.TPointSeries_LineSize_get
    if _newclass:
        LineSize = _swig_property(_Data.TPointSeries_LineSize_get, _Data.TPointSeries_LineSize_set)
    __swig_setmethods__["LineStyle"] = _Data.TPointSeries_LineStyle_set
    __swig_getmethods__["LineStyle"] = _Data.TPointSeries_LineStyle_get
    if _newclass:
        LineStyle = _swig_property(_Data.TPointSeries_LineStyle_get, _Data.TPointSeries_LineStyle_set)
    __swig_setmethods__["Interpolation"] = _Data.TPointSeries_Interpolation_set
    __swig_getmethods__["Interpolation"] = _Data.TPointSeries_Interpolation_get
    if _newclass:
        Interpolation = _swig_property(_Data.TPointSeries_Interpolation_get, _Data.TPointSeries_Interpolation_set)
    __swig_setmethods__["ShowLabels"] = _Data.TPointSeries_ShowLabels_set
    __swig_getmethods__["ShowLabels"] = _Data.TPointSeries_ShowLabels_get
    if _newclass:
        ShowLabels = _swig_property(_Data.TPointSeries_ShowLabels_get, _Data.TPointSeries_ShowLabels_set)
    __swig_getmethods__["Font"] = _Data.TPointSeries_Font_get
    if _newclass:
        Font = _swig_property(_Data.TPointSeries_Font_get)
    __swig_setmethods__["LabelPosition"] = _Data.TPointSeries_LabelPosition_set
    __swig_getmethods__["LabelPosition"] = _Data.TPointSeries_LabelPosition_get
    if _newclass:
        LabelPosition = _swig_property(_Data.TPointSeries_LabelPosition_get, _Data.TPointSeries_LabelPosition_set)
    __swig_setmethods__["PointType"] = _Data.TPointSeries_PointType_set
    __swig_getmethods__["PointType"] = _Data.TPointSeries_PointType_get
    if _newclass:
        PointType = _swig_property(_Data.TPointSeries_PointType_get, _Data.TPointSeries_PointType_set)

    def __init__(self):
        this = _Data.new_TPointSeries()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateTrendline(self, TrendType: 'TTrendType', Order: 'unsigned int'=2) -> "TBaseFuncPtr":
        return _Data.TPointSeries_CreateTrendline(self, TrendType, Order)

    def CreateMovingAverage(self, Period: 'unsigned int') -> "TBaseFuncPtr":
        return _Data.TPointSeries_CreateMovingAverage(self, Period)

    def CreateModelTrendline(self, *args) -> "TBaseFuncPtr":
        return _Data.TPointSeries_CreateModelTrendline(self, *args)
    __swig_destroy__ = _Data.delete_TPointSeries
    __del__ = lambda self: None
TPointSeries_swigregister = _Data.TPointSeries_swigregister
TPointSeries_swigregister(TPointSeries)

lpUserTopLeft = _Data.lpUserTopLeft
lpAboveX = _Data.lpAboveX
lpBelowX = _Data.lpBelowX
lpLeftOfY = _Data.lpLeftOfY
lpRightOfY = _Data.lpRightOfY
lpUserTopRight = _Data.lpUserTopRight
lpUserBottomLeft = _Data.lpUserBottomLeft
lpUserBottomRight = _Data.lpUserBottomRight
class TTextLabel(TGraphElem):
    __swig_setmethods__ = {}
    for _s in [TGraphElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TTextLabel, name, value)
    __swig_getmethods__ = {}
    for _s in [TGraphElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TTextLabel, name)
    __repr__ = _swig_repr

    def Scale(self, xSizeMul: 'double', ySizeMul: 'double') -> "void":
        return _Data.TTextLabel_Scale(self, xSizeMul, ySizeMul)

    def GetImage(self) -> "TMetafile *":
        return _Data.TTextLabel_GetImage(self)
    __swig_getmethods__["Rect"] = _Data.TTextLabel_Rect_get
    if _newclass:
        Rect = _swig_property(_Data.TTextLabel_Rect_get)
    __swig_setmethods__["Pos"] = _Data.TTextLabel_Pos_set
    __swig_getmethods__["Pos"] = _Data.TTextLabel_Pos_get
    if _newclass:
        Pos = _swig_property(_Data.TTextLabel_Pos_get, _Data.TTextLabel_Pos_set)
    __swig_setmethods__["Text"] = _Data.TTextLabel_Text_set
    __swig_getmethods__["Text"] = _Data.TTextLabel_Text_get
    if _newclass:
        Text = _swig_property(_Data.TTextLabel_Text_get, _Data.TTextLabel_Text_set)
    __swig_setmethods__["BackgroundColor"] = _Data.TTextLabel_BackgroundColor_set
    __swig_getmethods__["BackgroundColor"] = _Data.TTextLabel_BackgroundColor_get
    if _newclass:
        BackgroundColor = _swig_property(_Data.TTextLabel_BackgroundColor_get, _Data.TTextLabel_BackgroundColor_set)
    __swig_setmethods__["Placement"] = _Data.TTextLabel_Placement_set
    __swig_getmethods__["Placement"] = _Data.TTextLabel_Placement_get
    if _newclass:
        Placement = _swig_property(_Data.TTextLabel_Placement_get, _Data.TTextLabel_Placement_set)
    __swig_setmethods__["Rotation"] = _Data.TTextLabel_Rotation_set
    __swig_getmethods__["Rotation"] = _Data.TTextLabel_Rotation_get
    if _newclass:
        Rotation = _swig_property(_Data.TTextLabel_Rotation_get, _Data.TTextLabel_Rotation_set)

    def __init__(self):
        this = _Data.new_TTextLabel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Data.delete_TTextLabel
    __del__ = lambda self: None
TTextLabel_swigregister = _Data.TTextLabel_swigregister
TTextLabel_swigregister(TTextLabel)

ssAbove = _Data.ssAbove
ssBelow = _Data.ssBelow
ssXAxis = _Data.ssXAxis
ssYAxis = _Data.ssYAxis
ssBetween = _Data.ssBetween
ssInside = _Data.ssInside
class TShading(TGraphElem):
    __swig_setmethods__ = {}
    for _s in [TGraphElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TShading, name, value)
    __swig_getmethods__ = {}
    for _s in [TGraphElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TShading, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Color"] = _Data.TShading_Color_set
    __swig_getmethods__["Color"] = _Data.TShading_Color_get
    if _newclass:
        Color = _swig_property(_Data.TShading_Color_get, _Data.TShading_Color_set)
    __swig_setmethods__["ShadeStyle"] = _Data.TShading_ShadeStyle_set
    __swig_getmethods__["ShadeStyle"] = _Data.TShading_ShadeStyle_get
    if _newclass:
        ShadeStyle = _swig_property(_Data.TShading_ShadeStyle_get, _Data.TShading_ShadeStyle_set)
    __swig_setmethods__["BrushStyle"] = _Data.TShading_BrushStyle_set
    __swig_getmethods__["BrushStyle"] = _Data.TShading_BrushStyle_get
    if _newclass:
        BrushStyle = _swig_property(_Data.TShading_BrushStyle_get, _Data.TShading_BrushStyle_set)
    __swig_setmethods__["Func2"] = _Data.TShading_Func2_set
    __swig_getmethods__["Func2"] = _Data.TShading_Func2_get
    if _newclass:
        Func2 = _swig_property(_Data.TShading_Func2_get, _Data.TShading_Func2_set)
    __swig_setmethods__["MarkBorder"] = _Data.TShading_MarkBorder_set
    __swig_getmethods__["MarkBorder"] = _Data.TShading_MarkBorder_get
    if _newclass:
        MarkBorder = _swig_property(_Data.TShading_MarkBorder_get, _Data.TShading_MarkBorder_set)
    __swig_setmethods__["Min"] = _Data.TShading_Min_set
    __swig_getmethods__["Min"] = _Data.TShading_Min_get
    if _newclass:
        Min = _swig_property(_Data.TShading_Min_get, _Data.TShading_Min_set)
    __swig_setmethods__["Max"] = _Data.TShading_Max_set
    __swig_getmethods__["Max"] = _Data.TShading_Max_get
    if _newclass:
        Max = _swig_property(_Data.TShading_Max_get, _Data.TShading_Max_set)
    __swig_setmethods__["Min2"] = _Data.TShading_Min2_set
    __swig_getmethods__["Min2"] = _Data.TShading_Min2_get
    if _newclass:
        Min2 = _swig_property(_Data.TShading_Min2_get, _Data.TShading_Min2_set)
    __swig_setmethods__["Max2"] = _Data.TShading_Max2_set
    __swig_getmethods__["Max2"] = _Data.TShading_Max2_get
    if _newclass:
        Max2 = _swig_property(_Data.TShading_Max2_get, _Data.TShading_Max2_set)
    __swig_setmethods__["ExtendMinToIntercept"] = _Data.TShading_ExtendMinToIntercept_set
    __swig_getmethods__["ExtendMinToIntercept"] = _Data.TShading_ExtendMinToIntercept_get
    if _newclass:
        ExtendMinToIntercept = _swig_property(_Data.TShading_ExtendMinToIntercept_get, _Data.TShading_ExtendMinToIntercept_set)
    __swig_setmethods__["ExtendMaxToIntercept"] = _Data.TShading_ExtendMaxToIntercept_set
    __swig_getmethods__["ExtendMaxToIntercept"] = _Data.TShading_ExtendMaxToIntercept_get
    if _newclass:
        ExtendMaxToIntercept = _swig_property(_Data.TShading_ExtendMaxToIntercept_get, _Data.TShading_ExtendMaxToIntercept_set)
    __swig_setmethods__["ExtendMin2ToIntercept"] = _Data.TShading_ExtendMin2ToIntercept_set
    __swig_getmethods__["ExtendMin2ToIntercept"] = _Data.TShading_ExtendMin2ToIntercept_get
    if _newclass:
        ExtendMin2ToIntercept = _swig_property(_Data.TShading_ExtendMin2ToIntercept_get, _Data.TShading_ExtendMin2ToIntercept_set)
    __swig_setmethods__["ExtendMax2ToIntercept"] = _Data.TShading_ExtendMax2ToIntercept_set
    __swig_getmethods__["ExtendMax2ToIntercept"] = _Data.TShading_ExtendMax2ToIntercept_get
    if _newclass:
        ExtendMax2ToIntercept = _swig_property(_Data.TShading_ExtendMax2ToIntercept_get, _Data.TShading_ExtendMax2ToIntercept_set)

    def __init__(self):
        this = _Data.new_TShading()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Data.delete_TShading
    __del__ = lambda self: None
TShading_swigregister = _Data.TShading_swigregister
TShading_swigregister(TShading)

rtEquation = _Data.rtEquation
rtInequality = _Data.rtInequality
class TRelation(TGraphElem):
    __swig_setmethods__ = {}
    for _s in [TGraphElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TRelation, name, value)
    __swig_getmethods__ = {}
    for _s in [TGraphElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TRelation, name)
    __repr__ = _swig_repr

    def Eval(self, x: 'long double', y: 'long double') -> "long double":
        return _Data.TRelation_Eval(self, x, y)
    __swig_setmethods__["Color"] = _Data.TRelation_Color_set
    __swig_getmethods__["Color"] = _Data.TRelation_Color_get
    if _newclass:
        Color = _swig_property(_Data.TRelation_Color_get, _Data.TRelation_Color_set)
    __swig_setmethods__["Alpha"] = _Data.TRelation_Alpha_set
    __swig_getmethods__["Alpha"] = _Data.TRelation_Alpha_get
    if _newclass:
        Alpha = _swig_property(_Data.TRelation_Alpha_get, _Data.TRelation_Alpha_set)
    __swig_setmethods__["BrushStyle"] = _Data.TRelation_BrushStyle_set
    __swig_getmethods__["BrushStyle"] = _Data.TRelation_BrushStyle_get
    if _newclass:
        BrushStyle = _swig_property(_Data.TRelation_BrushStyle_get, _Data.TRelation_BrushStyle_set)
    __swig_setmethods__["LineStyle"] = _Data.TRelation_LineStyle_set
    __swig_getmethods__["LineStyle"] = _Data.TRelation_LineStyle_get
    if _newclass:
        LineStyle = _swig_property(_Data.TRelation_LineStyle_get, _Data.TRelation_LineStyle_set)
    __swig_getmethods__["RelationType"] = _Data.TRelation_RelationType_get
    if _newclass:
        RelationType = _swig_property(_Data.TRelation_RelationType_get)
    __swig_getmethods__["Text"] = _Data.TRelation_Text_get
    if _newclass:
        Text = _swig_property(_Data.TRelation_Text_get)
    __swig_getmethods__["Constraints"] = _Data.TRelation_Constraints_get
    if _newclass:
        Constraints = _swig_property(_Data.TRelation_Constraints_get)
    __swig_setmethods__["Size"] = _Data.TRelation_Size_set
    __swig_getmethods__["Size"] = _Data.TRelation_Size_get
    if _newclass:
        Size = _swig_property(_Data.TRelation_Size_get, _Data.TRelation_Size_set)

    def __init__(self, *args):
        this = _Data.new_TRelation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Data.delete_TRelation
    __del__ = lambda self: None
TRelation_swigregister = _Data.TRelation_swigregister
TRelation_swigregister(TRelation)

class TAxesView(TGraphElem):
    __swig_setmethods__ = {}
    for _s in [TGraphElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TAxesView, name, value)
    __swig_getmethods__ = {}
    for _s in [TGraphElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TAxesView, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _Data.delete_TAxesView
    __del__ = lambda self: None
TAxesView_swigregister = _Data.TAxesView_swigregister
TAxesView_swigregister(TAxesView)


import vcl
import collections
Point = collections.namedtuple("Point", ("x","y"))

def GraphElemRepr(self):
  return '%s("%s")' % (self.__class__.__name__, self.MakeText())
TStdFunc.__repr__ = GraphElemRepr
TParFunc.__repr__ = GraphElemRepr
TPolFunc.__repr__ = GraphElemRepr
TTangent.__repr__ = GraphElemRepr
TPointSeries.__repr__ = GraphElemRepr
TRelation.__repr__ = GraphElemRepr
TTextLabel.__repr__ = GraphElemRepr
TShading.__repr__ = GraphElemRepr
TAxesView.__repr__ = GraphElemRepr
TTopGraphElem.__repr__ = GraphElemRepr
TStringMap.__repr__ = lambda self: repr(dict(self))
def SetPoints(self, L): TPointList(self)[:] = L
def SetPointData(self, L): TPointDataList(self)[:] = L
TPointSeries.__swig_setmethods__["Points"] = SetPoints
TPointSeries.__swig_getmethods__["Points"] = lambda self: TPointList(self)
TPointSeries.__swig_setmethods__["PointData"] = SetPointData
TPointSeries.__swig_getmethods__["PointData"] = lambda self: TPointDataList(self)

def UnpackSlice(key, count):
  step = 1 if key.step is None else key.step
  if key.start is None:
    start = count-1 if not key.step is None and key.step < 0 else 0
  else:  
    start = (max(count+key.start, 0) if key.start < 0 else key.start)
  if key.stop is None:
    stop = -1 if not key.step is None and key.step < 0 else count
  else:
    stop = (max(count+key.stop, 0) if key.stop < 0 else min(key.stop, count))
  return start, stop, step

import collections
class MutableSequenceWithSlice(collections.MutableSequence):
  def __getitem__(self, key):
    Size = len(self)
    if isinstance(key, slice):
      start, stop, step = UnpackSlice(key, Size)
      return [self._get(i) for i in range(start, stop, step)]
    if -Size <= key < Size:
      return self._get(Size + key if key < 0 else key)
    raise IndexError("Index out of range")

  def __setitem__(self, key, value):
    if isinstance(key, slice):
      start, stop, step = UnpackSlice(key, len(self))
      if step == 1 or step == -1:
        if len(self) > 0:
          self._del(min(start, stop), abs(stop - start))
        for x in zip(range(start, start + len(value), step), value):
          self.insert(x[0], x[1])
      elif len(range(start, stop, step)) == len(value):
        for x in zip(range(start, stop, step), value):
          self._set(x[0], x[1])
      else:
        raise ValueError("attempt to assign sequence of size %d to extended slice of size %d" % (len(value), len(range(key.start, key.stop, key.step))))
    else:
      self._set(self.PointSeries.PointCount() + key if key < 0 else key, value)

  def __delitem__(self, key):
    if isinstance(key, slice):
      start, stop, step = UnpackSlice(key, len(self))
      if step == 1 or step == -1:
        self._del(min(start, stop), abs(stop - start))
      else:
        for i in range(start, stop, step) if step < 0 else reversed(range(start, stop, step)):
          self._del(i, 1)
    else:
      self._del(len(self) + key if key < 0 else key, 1)

  def insert(self, key, value):
    if key >= len(self):
      self.append(value)
    else:
      self._insert(max(0, len(self) + key) if key < 0 else key, value)

  def __repr__(self):
    return repr(list(self))

  def __eq__(self, other):
    if self is other:
      return True
    if len(other) !=  len(self):
      return False
    for i in range(len(other)):
      if other[i] != self._get(i):
        return False
    return True

  def __ne__(self, other):
    return not self == other

class TPointList(MutableSequenceWithSlice):
  def __init__(self, PointSeries):
    self.PointSeries = PointSeries
  def _get(self, key):
    return Point._make(self.PointSeries.GetDblPoint(key))
  def __len__(self):
    return self.PointSeries.PointCount()
  def _insert(self, key, value):
    self.PointSeries.InsertDblPoint(value, key)
  def append(self, value):
    self.PointSeries.InsertDblPoint(value, -1)
  def _set(self, key, value):
    self.PointSeries.ReplaceDblPoint(value, key)
  def _del(self, index, count):
    self.PointSeries.DeletePoint(index, count)

class TPointDataList(MutableSequenceWithSlice):
  def __init__(self, PointSeries):
    self.PointSeries = PointSeries
  def _get(self, key):
    return self.PointSeries.GetPoint(key)
  def __len__(self):
    return self.PointSeries.PointCount()
  def _insert(self, key, value):
    if len(value) == 2: value = value[0], value[1], "", ""
    self.PointSeries.InsertPoint(value, key)
  def append(self, value):
    if len(value) == 2: value = value[0], value[1], "", ""
    self.PointSeries.InsertPoint(value, -1)
  def _set(self, key, value):
    if len(value) == 2: value = value[0], value[1], "", ""
    self.PointSeries.ReplacePoint(value, key)
  def _del(self, index, count):
    self.PointSeries.DeletePoint(index, count)

# This file is compatible with both classic and new-style classes.


