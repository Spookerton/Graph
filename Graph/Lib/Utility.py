# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Utility')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Utility')
    _Utility = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Utility', [dirname(__file__)])
        except ImportError:
            import _Utility
            return _Utility
        try:
            _mod = imp.load_module('_Utility', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Utility = swig_import_helper()
    del swig_import_helper
else:
    import _Utility
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def BeginMultiUndo() -> "void":
    return _Utility.BeginMultiUndo()
BeginMultiUndo = _Utility.BeginMultiUndo

def EndMultiUndo() -> "void":
    return _Utility.EndMultiUndo()
EndMultiUndo = _Utility.EndMultiUndo

def LoadDefault() -> "void":
    return _Utility.LoadDefault()
LoadDefault = _Utility.LoadDefault

def LoadFromFile(FileName: 'std::wstring const &', AddToRecent: 'bool'=True, ShowErrorMessages: 'bool'=True) -> "bool":
    return _Utility.LoadFromFile(FileName, AddToRecent, ShowErrorMessages)
LoadFromFile = _Utility.LoadFromFile

def SaveToFile(FileName: 'std::wstring const &', Remember: 'bool'=True) -> "bool":
    return _Utility.SaveToFile(FileName, Remember)
SaveToFile = _Utility.SaveToFile

def ImportPointSeries(FileName: 'std::wstring const &', Separator: 'char'=0) -> "void":
    return _Utility.ImportPointSeries(FileName, Separator)
ImportPointSeries = _Utility.ImportPointSeries

def ImportPointSeriesText(Str: 'std::string const &', Separator: 'char'=0) -> "void":
    return _Utility.ImportPointSeriesText(Str, Separator)
ImportPointSeriesText = _Utility.ImportPointSeriesText

def Import(FileName: 'std::wstring const &') -> "void":
    return _Utility.Import(FileName)
Import = _Utility.Import

def GetText(Str: 'wchar_t const *') -> "std::wstring":
    return _Utility.GetText(Str)
GetText = _Utility.GetText

def ChangeLanguage(Language: 'std::wstring const &') -> "void":
    return _Utility.ChangeLanguage(Language)
ChangeLanguage = _Utility.ChangeLanguage

def UpdateMenu() -> "void":
    return _Utility.UpdateMenu()
UpdateMenu = _Utility.UpdateMenu

def ClearCache() -> "void":
    return _Utility.ClearCache()
ClearCache = _Utility.ClearCache

def ComplexToString(C: 'std::complex< double > const &', Decimals: 'unsigned int', ComplexFormat: 'TComplexFormat') -> "String":
    return _Utility.ComplexToString(C, Decimals, ComplexFormat)
ComplexToString = _Utility.ComplexToString

def SmoothResize(Image: 'TPngImage *', Width: 'int', Height: 'int') -> "void":
    return _Utility.SmoothResize(Image, Width, Height)
SmoothResize = _Utility.SmoothResize

def ConvertTransparentToAlpha(Image: 'TPngImage *', TransparentColor: 'TColor') -> "void":
    return _Utility.ConvertTransparentToAlpha(Image, TransparentColor)
ConvertTransparentToAlpha = _Utility.ConvertTransparentToAlpha

def TranslateProperties(Object: 'TObject *') -> "void":
    return _Utility.TranslateProperties(Object)
TranslateProperties = _Utility.TranslateProperties
# This file is compatible with both classic and new-style classes.


